var data = {lines:[
{"lineNum":"    1","line":"# Based on the Qt 5 processor detection code, so should be very accurate"},
{"lineNum":"    2","line":"# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h"},
{"lineNum":"    3","line":"# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"# Regarding POWER/PowerPC, just as is noted in the Qt source,"},
{"lineNum":"    6","line":"# \"There are many more known variants/revisions that we do not handle/detect.\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"set(archdetect_c_code \"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"    9","line":"#if defined(__arm__) || defined(__TARGET_ARCH_ARM)"},
{"lineNum":"   10","line":"    #if defined(__ARM_ARCH_7__) \\\\"},
{"lineNum":"   11","line":"        || defined(__ARM_ARCH_7A__) \\\\","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   12","line":"        || defined(__ARM_ARCH_7R__) \\\\"},
{"lineNum":"   13","line":"        || defined(__ARM_ARCH_7M__) \\\\"},
{"lineNum":"   14","line":"        || (defined(__TARGET_ARCH_ARM) && __TARGET_ARCH_ARM-0 >= 7)"},
{"lineNum":"   15","line":"        #error cmake_ARCH armv7"},
{"lineNum":"   16","line":"    #elif defined(__ARM_ARCH_6__) \\\\"},
{"lineNum":"   17","line":"        || defined(__ARM_ARCH_6J__) \\\\","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   18","line":"        || defined(__ARM_ARCH_6T2__) \\\\"},
{"lineNum":"   19","line":"        || defined(__ARM_ARCH_6Z__) \\\\"},
{"lineNum":"   20","line":"        || defined(__ARM_ARCH_6K__) \\\\"},
{"lineNum":"   21","line":"        || defined(__ARM_ARCH_6ZK__) \\\\"},
{"lineNum":"   22","line":"        || defined(__ARM_ARCH_6M__) \\\\"},
{"lineNum":"   23","line":"        || (defined(__TARGET_ARCH_ARM) && __TARGET_ARCH_ARM-0 >= 6)"},
{"lineNum":"   24","line":"        #error cmake_ARCH armv6"},
{"lineNum":"   25","line":"    #elif defined(__ARM_ARCH_5TEJ__) \\\\"},
{"lineNum":"   26","line":"        || (defined(__TARGET_ARCH_ARM) && __TARGET_ARCH_ARM-0 >= 5)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   27","line":"        #error cmake_ARCH armv5"},
{"lineNum":"   28","line":"    #else"},
{"lineNum":"   29","line":"        #error cmake_ARCH arm"},
{"lineNum":"   30","line":"    #endif"},
{"lineNum":"   31","line":"#elif defined(__i386) || defined(__i386__) || defined(_M_IX86)"},
{"lineNum":"   32","line":"    #error cmake_ARCH i386"},
{"lineNum":"   33","line":"#elif defined(__x86_64) || defined(__x86_64__) || defined(__amd64) || defined(_M_X64)"},
{"lineNum":"   34","line":"    #error cmake_ARCH x86_64"},
{"lineNum":"   35","line":"#elif defined(__ia64) || defined(__ia64__) || defined(_M_IA64)"},
{"lineNum":"   36","line":"    #error cmake_ARCH ia64"},
{"lineNum":"   37","line":"#elif defined(__ppc__) || defined(__ppc) || defined(__powerpc__) \\\\"},
{"lineNum":"   38","line":"      || defined(_ARCH_COM) || defined(_ARCH_PWR) || defined(_ARCH_PPC)  \\\\","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   39","line":"      || defined(_M_MPPC) || defined(_M_PPC)"},
{"lineNum":"   40","line":"    #if defined(__ppc64__) || defined(__powerpc64__) || defined(__64BIT__)"},
{"lineNum":"   41","line":"        #error cmake_ARCH ppc64"},
{"lineNum":"   42","line":"    #else"},
{"lineNum":"   43","line":"        #error cmake_ARCH ppc"},
{"lineNum":"   44","line":"    #endif"},
{"lineNum":"   45","line":"#endif"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#error cmake_ARCH unknown"},
{"lineNum":"   48","line":"\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"# Set ppc_support to TRUE before including this file or ppc and ppc64"},
{"lineNum":"   51","line":"# will be treated as invalid architectures since they are no longer supported by Apple"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"function(target_architecture output_var)"},
{"lineNum":"   54","line":"    if(APPLE AND CMAKE_OSX_ARCHITECTURES)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   55","line":"        # On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set"},
{"lineNum":"   56","line":"        # First let\'s normalize the order of the values"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        # Note that it\'s not possible to compile PowerPC applications if you are using"},
{"lineNum":"   59","line":"        # the OS X SDK version 10.6 or later - you\'ll need 10.4/10.5 for that, so we"},
{"lineNum":"   60","line":"        # disable it by default"},
{"lineNum":"   61","line":"        # See this page for more information:"},
{"lineNum":"   62","line":"        # http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        # Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime."},
{"lineNum":"   65","line":"        # On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise."},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        foreach(osx_arch ${CMAKE_OSX_ARCHITECTURES})","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   68","line":"            if(\"${osx_arch}\" STREQUAL \"ppc\" AND ppc_support)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   69","line":"                set(osx_arch_ppc TRUE)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   70","line":"            elseif(\"${osx_arch}\" STREQUAL \"i386\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   71","line":"                set(osx_arch_i386 TRUE)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   72","line":"            elseif(\"${osx_arch}\" STREQUAL \"x86_64\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   73","line":"                set(osx_arch_x86_64 TRUE)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   74","line":"            elseif(\"${osx_arch}\" STREQUAL \"ppc64\" AND ppc_support)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   75","line":"                set(osx_arch_ppc64 TRUE)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   76","line":"            else()"},
{"lineNum":"   77","line":"                message(FATAL_ERROR \"Invalid OS X arch name: ${osx_arch}\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   78","line":"            endif()"},
{"lineNum":"   79","line":"        endforeach()"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        # Now add all the architectures in our normalized order"},
{"lineNum":"   82","line":"        if(osx_arch_ppc)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   83","line":"            list(APPEND ARCH ppc)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   84","line":"        endif()"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        if(osx_arch_i386)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   87","line":"            list(APPEND ARCH i386)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   88","line":"        endif()"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        if(osx_arch_x86_64)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   91","line":"            list(APPEND ARCH x86_64)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   92","line":"        endif()"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        if(osx_arch_ppc64)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   95","line":"            list(APPEND ARCH ppc64)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   96","line":"        endif()"},
{"lineNum":"   97","line":"    else()"},
{"lineNum":"   98","line":"        file(WRITE \"${CMAKE_BINARY_DIR}/arch.c\" \"${archdetect_c_code}\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        enable_language(C)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        # Detect the architecture in a rather creative way..."},
{"lineNum":"  103","line":"        # This compiles a small C program which is a series of ifdefs that selects a"},
{"lineNum":"  104","line":"        # particular #error preprocessor directive whose message string contains the"},
{"lineNum":"  105","line":"        # target architecture. The program will always fail to compile (both because"},
{"lineNum":"  106","line":"        # file is not a valid C program, and obviously because of the presence of the"},
{"lineNum":"  107","line":"        # #error preprocessor directives... but by exploiting the preprocessor in this"},
{"lineNum":"  108","line":"        # way, we can detect the correct target architecture even when cross-compiling,"},
{"lineNum":"  109","line":"        # since the program itself never needs to be run (only the compiler/preprocessor)"},
{"lineNum":"  110","line":"        try_run(","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  111","line":"            run_result_unused","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  112","line":"            compile_result_unused","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  113","line":"            \"${CMAKE_BINARY_DIR}\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  114","line":"            \"${CMAKE_BINARY_DIR}/arch.c\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  115","line":"            COMPILE_OUTPUT_VARIABLE ARCH","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  116","line":"            CMAKE_FLAGS CMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  117","line":"        )","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        # Parse the architecture name from the compiler output"},
{"lineNum":"  120","line":"        string(REGEX MATCH \"cmake_ARCH ([a-zA-Z0-9_]+)\" ARCH \"${ARCH}\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        # Get rid of the value marker leaving just the architecture name"},
{"lineNum":"  123","line":"        string(REPLACE \"cmake_ARCH \" \"\" ARCH \"${ARCH}\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        # If we are compiling with an unknown architecture this variable should"},
{"lineNum":"  126","line":"        # already be set to \"unknown\" but in the case that it\'s empty (i.e. due"},
{"lineNum":"  127","line":"        # to a typo in the code), then set it to unknown"},
{"lineNum":"  128","line":"        if (NOT ARCH)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  129","line":"            set(ARCH unknown)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  130","line":"        endif()"},
{"lineNum":"  131","line":"    endif()"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    set(${output_var} \"${ARCH}\" PARENT_SCOPE)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  134","line":"endfunction()"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "foobar.sh", "date" : "2018-06-08 06:28:55", "instrumented" : 40, "covered" : 0,};
var merged_data = [];
